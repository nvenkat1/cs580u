#include<stdio.h>

struct Node{
	Data d;
	Node *left;
	Node *right;
	Node *parent;
}

struct tree{
	Node *root;
};

void deleteNode(struct Tree *, Data d){

}
Node * createNode(Data d, Node * parent){ //how would we know what to set to parent, hence add parameter to know when to set aprart.
	Node * n = malloc(sizeof(Node));
	n->data = d;
	n->parent = parent; 		//for root, pass parent as NULL
	n->left = n->right = NULL;
	return n;
}

void insertNode(Tree *t, Data d){
	if(t.root == NULL){
		t->root = createNode(d,NULL);
	}else{
		insert(d, t->root);
	}
}
Data * searchNode(Tree *t, Data d){
        if(t.root == NULL){
                //t->root = createNode(d,NULL);
		return NULL;
        }else{
                search(d, t->root);
        }
}

void insert(Data d, Node *root){
	/*
	//Whole thing is added to insertNode function
	//When root is null we dont have access to Tree
	//Solution add 3rd param, Tree *t
	//but we cant make and pass that parameter all the time. break it into auxalary function
	if(root==NULL)
		root = createNode(d, NULL);
	//- If value is less then -go>left
	*/
	if(d.data < root->d.data){
		// If less is null
		if(root->left == NULL){
	 		root->left = createNode();            //Base case
		}else{
		//already node there, make current node as root for next node)
			insert(data, root->left);
		}
	}else if(d.data > root->d.data){
	//value is greater - than go right
		// If right is null
		if(root->right == NULL){
			root->right = createNode();            //Base case
		}else{
		//already node there, make current node as root for next node)
			insert( data, root->right);
		}
	}
	//if value is equal.. we are not handling that.
}

Data * seach(Data d, Node *root){
        if(d.data < root->d.data){
                // If less is null
                if(root->left == NULL){
                        //root->left = createNode();            //Base case
			return NULL;
                }else{
                //already node there, make current node as root for next node)
                        return search(data, root->left);		//Added return
		//We will have to returb geer b/c of recursion
                }
        }else if(d.data > root->d.data){
        //value is greater - than go right
                // If right is null
                if(root->right == NULL){
                        //root->right = createNode();            //Base case
			return NULL;
                }else{
                //already node there, make current node as root for next node)
                        return search( data, root->right);
                }
        }else{
		return &(root.data);
	}
}
int main(){


	return 0;
}
